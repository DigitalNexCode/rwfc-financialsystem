/*
          # [Initial Schema Setup for RWFC Financial Consultants]
          This script sets up the initial database schema for the RWFC application, including tables for user profiles, clients, tasks, documents, and messaging. It also establishes Row Level Security (RLS) to ensure data privacy and role-based access.

          ## Query Description: This operation is structural and foundational. It creates new tables and enables security policies. It does not modify or delete any existing data, but it is critical for the application's functionality. It is not easily reversible without deleting the tables.
          
          ## Metadata:
          - Schema-Category: "Structural"
          - Impact-Level: "High"
          - Requires-Backup: false
          - Reversible: false
          
          ## Structure Details:
          - Creates tables: `profiles`, `clients`, `tasks`, `documents`, `conversations`, `messages`.
          - Creates types: `user_role`, `task_priority`, `task_status`.
          - Creates function `create_public_profile_for_new_user` and a trigger on `auth.users`.
          
          ## Security Implications:
          - RLS Status: Enabled on all new tables.
          - Policy Changes: Yes, new policies are created to enforce role-based access.
          - Auth Requirements: Policies are based on `auth.uid()` and the custom `role` in the `profiles` table.
          
          ## Performance Impact:
          - Indexes: Primary keys and foreign keys are indexed by default.
          - Triggers: Adds one trigger to `auth.users` for profile creation.
          - Estimated Impact: Low performance impact on a new database.
          */

-- 1. Custom Types
create type public.user_role as enum ('admin', 'manager', 'staff', 'client');
create type public.task_priority as enum ('low', 'medium', 'high');
create type public.task_status as enum ('pending', 'in-progress', 'completed');

-- 2. Profiles Table
-- Stores public-facing user information and application-specific roles.
create table public.profiles (
  id uuid not null references auth.users on delete cascade,
  email text,
  name text,
  role public.user_role default 'client'::public.user_role,
  avatar_url text,
  primary key (id)
);
comment on table public.profiles is 'Stores public user data and application-specific roles.';

-- 3. Clients Table
-- Stores information about the financial consultants'' clients.
create table public.clients (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  name text not null,
  email text,
  phone text,
  company text,
  vat_number text,
  status text default 'active'::text
);
comment on table public.clients is 'Represents the clients of the financial consultancy.';

-- 4. Tasks Table
-- Stores tasks related to clients or internal work.
create table public.tasks (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  title text not null,
  description text,
  client_id bigint references public.clients on delete set null,
  assignee_id uuid references public.profiles on delete set null,
  priority public.task_priority default 'medium'::public.task_priority,
  status public.task_status default 'pending'::public.task_status,
  due_date date
);
comment on table public.tasks is 'Tasks for clients and internal work.';

-- 5. Documents Table
-- Stores metadata about uploaded documents.
create table public.documents (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  name text not null,
  client_id bigint not null references public.clients on delete cascade,
  uploader_id uuid not null references public.profiles on delete cascade,
  storage_path text not null,
  file_type text,
  size bigint,
  category text,
  ai_status text,
  confidence real,
  extracted_data jsonb
);
comment on table public.documents is 'Metadata for uploaded client documents.';

-- 6. Conversations & Messages Tables
-- For the secure messaging system.
create table public.conversations (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  client_id uuid not null references public.profiles on delete cascade,
  assignee_id uuid references public.profiles on delete set null,
  status text default 'unassigned'::text,
  last_message_at timestamp with time zone default timezone('utc'::text, now()) not null
);
comment on table public.conversations is 'Threads for client-staff messaging.';

create table public.messages (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  conversation_id bigint not null references public.conversations on delete cascade,
  sender_id uuid not null references public.profiles on delete cascade,
  content text,
  is_encrypted boolean default false
);
comment on table public.messages is 'Individual messages within a conversation.';

-- 7. Function to create a public profile for a new user
create or replace function public.create_public_profile_for_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.profiles (id, email, name, role)
  values (
    new.id,
    new.email,
    new.raw_user_meta_data->>'name',
    (new.raw_user_meta_data->>'role')::public.user_role
  );
  return new;
end;
$$;
comment on function public.create_public_profile_for_new_user is 'Trigger function to create a profile when a new user signs up in auth.';

-- 8. Trigger to call the function on new user creation
create trigger on_new_user_created
  after insert on auth.users
  for each row execute procedure public.create_public_profile_for_new_user();

-- 9. Enable Row Level Security (RLS)
alter table public.profiles enable row level security;
alter table public.clients enable row level security;
alter table public.tasks enable row level security;
alter table public.documents enable row level security;
alter table public.conversations enable row level security;
alter table public.messages enable row level security;

-- 10. RLS Policies
-- Profiles: Users can see their own profile. Admins/Managers/Staff can see all profiles.
create policy "Users can see own profile" on public.profiles for select using (auth.uid() = id);
create policy "Staff can see all profiles" on public.profiles for select using ( (select role from public.profiles where id = auth.uid()) in ('admin', 'manager', 'staff') );
create policy "Users can update their own profile" on public.profiles for update using (auth.uid() = id);

-- Clients: Admins/Managers/Staff can manage all clients.
create policy "Staff can manage all clients" on public.clients for all using ( (select role from public.profiles where id = auth.uid()) in ('admin', 'manager', 'staff') );

-- Tasks: Staff can manage all tasks. Clients can only see tasks assigned to their client record (this needs a join, simplified for now).
create policy "Staff can manage all tasks" on public.tasks for all using ( (select role from public.profiles where id = auth.uid()) in ('admin', 'manager', 'staff') );

-- Documents: Staff can manage all docs. Clients can only see their own.
create policy "Staff can manage all documents" on public.documents for all using ( (select role from public.profiles where id = auth.uid()) in ('admin', 'manager', 'staff') );
create policy "Clients can see their own documents" on public.documents for select using ( (select role from public.profiles where id = auth.uid()) = 'client' and uploader_id = auth.uid());

-- Conversations & Messages: Users can only see conversations they are a part of.
create policy "Users can access their own conversations" on public.conversations for all using (
  (select role from public.profiles where id = auth.uid()) in ('admin', 'manager', 'staff') or client_id = auth.uid()
);
create policy "Users can access messages in their conversations" on public.messages for all using (
  conversation_id in (select id from public.conversations)
);

-- Note: More specific RLS policies, especially for clients viewing their own data that might be created by staff (like tasks),
-- would require more complex logic, possibly involving joins or security definer functions.
-- This initial setup provides a solid and secure foundation.
